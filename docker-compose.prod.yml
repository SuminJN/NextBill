version: '3.8'

services:
  # Database
  mysql:
    image: mysql:8.0
    container_name: nextbill-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: nextbill
      MYSQL_USER: nextbill
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "3306:3306"
    networks:
      - nextbill-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Cache
  redis:
    image: redis:7-alpine
    container_name: nextbill-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - nextbill-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      timeout: 20s
      retries: 10

  # Message Queue
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: nextbill-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - nextbill-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: nextbill-kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    ports:
      - "9092:9092"
    networks:
      - nextbill-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      timeout: 20s
      retries: 10

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nextbill-backend
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      # Database
      SPRING_DATASOURCE_URL: jdbc:mysql://nextbill-mysql:3306/nextbill?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Seoul
      SPRING_DATASOURCE_USERNAME: nextbill
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD}
      
      # Redis
      SPRING_REDIS_HOST: nextbill-redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # Kafka
      SPRING_KAFKA_BOOTSTRAP_SERVERS: nextbill-kafka:29092
      
      # Email
      NEXTBILL_EMAIL_USERNAME: ${NEXTBILL_EMAIL_USERNAME}
      NEXTBILL_EMAIL_PASSWORD: ${NEXTBILL_EMAIL_PASSWORD}
      
      # OAuth2
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      
      # JWT
      JWT_SECRET: ${JWT_SECRET}
      
      # Profile
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8080:8080"
    networks:
      - nextbill-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      timeout: 20s
      retries: 10

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: nextbill-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    networks:
      - nextbill-network
    depends_on:
      backend:
        condition: service_healthy

  # Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: nextbill-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - nextbill-network

volumes:
  mysql_data:
  redis_data:

networks:
  nextbill-network:
    driver: bridge
