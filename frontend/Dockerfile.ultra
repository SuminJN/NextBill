# 극한 최적화 Dockerfile - 메모리가 제한적인 환경용
FROM node:18-alpine AS base
WORKDIR /app

# 의존성 설치 단계 - 캐시 최적화
FROM base AS deps
COPY package*.json ./
# 캐시 최적화된 설치
RUN npm ci --only=production --prefer-offline --no-audit --no-fund --cache /tmp/.npm

# 개발 의존성 설치 (빌드용)
FROM base AS build-deps
COPY package*.json ./
RUN npm ci --prefer-offline --no-audit --no-fund --cache /tmp/.npm

# 빌드 단계 - 메모리 최적화
FROM build-deps AS builder
COPY . .

# 메모리 제한적 환경을 위한 빌드
ENV NODE_OPTIONS="--max-old-space-size=512"
ENV NODE_ENV=production

# 점진적 빌드 (실패 시 더 작은 메모리로 재시도)
RUN npm run build:ultra || \
    (NODE_OPTIONS="--max-old-space-size=256" npm run build:minimal) || \
    (echo "빌드 실패 - 메모리 부족. 더 강력한 인스턴스 필요" && exit 1)

# 프로덕션 단계 - 최소 크기
FROM nginx:alpine AS production

# Nginx 설정
COPY frontend/nginx.conf /etc/nginx/nginx.conf

# 빌드된 파일만 복사
COPY --from=builder /app/dist /usr/share/nginx/html

# 권한 설정
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]
